using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using System.Data.SqlClient;
using edu.stanford.nlp.tagger.maxent;
using java.util;

namespace PhraseIdentifier
{
    class Program
    {
        //reader function to reader all files in folder and return string of all lines appended after removing non alphanumeric values
        static string readFile()
        {
            string[] files = Directory.GetFiles("C:\\Users\\smiru\\source\\repos\\PhraseIdentifier\\PhraseIdentifier\\documents");
            string output = "";
            foreach(string f in files)
            {
                output = output + File.ReadAllText(f);
            }
            return output;
        }
        static List<string> tokenize(string output)
        {
            char[] outputArray = new char[output.ToCharArray().Length];
            Dictionary<string, int> TF = new Dictionary<string, int>();
            List<string> words = new List<string>();
            List<int> offset = new List<int>();
            string token = "";
            outputArray = output.ToCharArray();
            for(int i = 0; i < outputArray.Length; i++)
            {
                if (char.IsLetterOrDigit(outputArray[i]))
                {
                    token = token + outputArray[i];
                }
                else
                {
                    if (token.Length > 0)
                    {
                        words.Add(token);
                        int val = 0;
                        if (TF.TryGetValue(token, out val))
                        {
                            TF[token] = val++;
                        }
                        else
                        {
                            TF.Add(token,1);
                        }
                        offset.Add(i - token.Length);
                        token = "";
                    }
                }
            }
            foreach(string s in TF.Keys)
            {
                Console.WriteLine(s + "\t" + TF[s]);
            }
            return words;
        }

        static void insertToDB(List<string> words)
        {
            string connstring = @"server=.\SQLEXPRESS; database=mydb1; Integrated Security = True;";
            SqlConnection con = new SqlConnection(connstring);
            con.Open();
            DataTable dt = new DataTable();
            dt.Columns.Add("word", typeof(string));
            Console.WriteLine("Writing to table");
            for (int i = 0; i < words.Count(); i++)
            {
                dt.Rows.Add(words.ElementAt(i));
            }
            SqlBulkCopy bcp = new SqlBulkCopy(con);
            bcp.DestinationTableName = "wordindex";
            bcp.ColumnMappings.Add(0, "word");
            bcp.WriteToServer(dt);
            Console.WriteLine("Complete");
        }
        static string tagger(string output)
        {
            MaxentTagger modelFile = new MaxentTagger("\\taggers\\wsj-0-18-caseless-left3words-distsim.tagger");
            string tagged = modelFile.tagString(output);
            return tagged;
        }
        static void Main(string[] args)
        {
            string inputString = readFile();
            List<string> words = new List<string>();
            words = tokenize(inputString);
            insertToDB(words);
            string tagged = tagger(inputString);
        }
    }
}
